20. Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true




###CODE

class Solution(object):
    def isValid(self, s):
        stack = []
        bracket_map = {')': '(', '}': '{', ']': '['}  # Mapping of closing to opening brackets

        for char in s:
            if char in bracket_map:  # If it's a closing bracket
                top_element = stack.pop() if stack else '#'  # Pop from stack or use '#' as a placeholder
                if top_element != bracket_map[char]:  # Check if it matches the expected opening bracket
                    return False
            else:
                stack.append(char)  # Push opening bracket

        return not stack  # Stack should be empty for a valid sequence

# Test cases
solution = Solution()
print(solution.isValid("()"))       # True
print(solution.isValid("()[]{}"))   # True
print(solution.isValid("(]"))       # False
print(solution.isValid("([])"))     # True
print(solution.isValid("{[()]}"))   # True
print(solution.isValid("{[(])}"))   # False
